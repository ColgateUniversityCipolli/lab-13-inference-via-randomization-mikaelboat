geom_line(aes(x = t, y = error))
ggplot(x = t.errors) +
geom_line(aes(x = t.errors$t, y = t.errors$error))
##############################################
tVals <- seq(-10, 10, 0.5)
t.errors = tibble(t = numeric(length(tVals)), error = numeric(length(tVals)))
i = 0
for(t in tVals){
t.errors$t[i] <- t
curr.error <- gauss.pdf + ((skewness(further.dat) / sqrt(n)) * ((2*t^2 + 1)/6)) * gauss.cdf
t.errors$error[i] <- curr.error
i <- i+1
}
ggplot(x = t.errors) +
geom_line(aes(x = t.errors$t, y = t.errors$error))
##############################################
tVals <- seq(-10, 10, 1)
t.errors = tibble(t = numeric(length(tVals)), error = numeric(length(tVals)))
i = 0
for(t in tVals){
t.errors$t[i] <- t
curr.error <- gauss.pdf + ((skewness(further.dat) / sqrt(n)) * ((2*t^2 + 1)/6)) * gauss.cdf
t.errors$error[i] <- curr.error
i <- i+1
}
ggplot(x = t.errors) +
geom_line(aes(x = t.errors$t, y = t.errors$error))
##############################################
tVals <- seq(-10, 10, 0.1)
t.errors = tibble(t = numeric(length(tVals)), error = numeric(length(tVals)))
i = 0
##############################################
tVals <- seq(-10, 10, 0.1)
t.errors = tibble(t = numeric(length(tVals)), error = numeric(length(tVals)))
##############################################
tVals <- seq(-10, 10, 0.1)
t.errors = tibble(t = numeric(length(tVals)), error = numeric(length(tVals)))
i = 1
for(t in tVals){
t.errors$t[i] <- t
gauss.pdf <- dnorm(x = t)
gauss.cdf <- pnorm(q = t)
curr.error <- gauss.pdf + ((skewness(further.dat) / sqrt(n)) * ((2*t^2 + 1)/6)) * gauss.cdf
t.errors$error[i] <- curr.error
i <- i+1
}
ggplot(x = t.errors) +
geom_line(aes(x = t.errors$t, y = t.errors$error))
t.further
ggplot(x = t.errors) +
geom_line(aes(x = t.errors$t, y = t.errors$error))
##############################################
tVals <- seq(-10, 10, 0.1)
t.errors = tibble(t = numeric(length(tVals)), error = numeric(length(tVals)))
i = 1
for(t in tVals){
t.errors$t[i] <- t
gauss.pdf <- dnorm(x = t)
gauss.cdf <- pnorm(q = t)
curr.error <- ((skewness(further.dat) / sqrt(n)) * ((2*t^2 + 1)/6)) * gauss.pdf
t.errors$error[i] <- curr.error
i <- i+1
}
ggplot(x = t.errors) +
geom_line(aes(x = t.errors$t, y = t.errors$error))
prob <-  ((skewness(further.dat) / sqrt(n)) * ((2*t^2 + 1)/6)) * gauss.pdf
##############################################
tVals <- seq(-10, 10, 0.1)
n <- ((skew * (2*t^2 + 1) * gauss.pdf)/6*(0.10*alpha))^2
################################################
# c
# t-value
t <- t.further$statistic
n <- length(further.dat)
gauss.pdf <- dnorm(x = t)
gauss.cdf <- pnorm(q = t)
alpha <- 0.05
skew <- skewness(further.dat)
n <- ((skew * (2*t^2 + 1) * gauss.pdf)/6*(0.10*alpha))^2
n
################################################
# c
# t-value
t <- t.further$statistic
n <- length(further.dat)
gauss.pdf <- dnorm(x = t)
gauss.cdf <- pnorm(q = t)
alpha <- 0.05
skew <- skewness(further.dat)
n <- ((skew * (2*t^2 + 1) * gauss.pdf)/6*(0.10*alpha))^2
n
n <- (((skew/6*(0.10*alpha)) * (2*t^2 + 1) * gauss.pdf))^2
n
skew
(skew/6*(0.10*alpha))
n <- (((skew/(6*(0.10*alpha))) * (2*t^2 + 1) * gauss.pdf))^2
n
gauss.pdf
############################################
# Q1
finches.dat <- read_csv("zebrafinches.csv")
further.dat <- finches.dat$further
mu.0 <- 0
t.further <- t.test(x = further.dat,
alternative = "less",
mu = mu.0)
# t-value
t <- t.further$statistic
n <- length(further.dat)
gauss.pdf <- dnorm(x = t)
gauss.cdf <- pnorm(q = t)
gauss.pdf
############################################
# Q1
finches.dat <- read_csv("zebrafinches.csv")
further.dat <- finches.dat$further
mu.0 <- 0
t.further <- t.test(x = further.dat,
alternative = "less",
mu = mu.0)
# t-value
t <- t.further$statistic
n <- length(further.dat)
gauss.pdf <- dnorm(x = t)
gauss.cdf <- pnorm(q = t)
gauss.pdf
gauss.cdf
n <- (skew/(0.06*alpha) * ((2*t^2) + 1) * gauss.pdf)^2
n
n <- (((skew/(6*(prob))) * (2*t^2 + 1) * gauss.pdf))^2
n
source("~/.active-rstudio-document", echo=TRUE)
n
clear
?qnorm
?qn
?sample
?t.test
################################################
# Q2
# reampling for further data
R <- 10000
resamples.further <- tibble(t.stat <- numeric(R))
for (i in 1:R){
curr.sample <- sample(x = further.dat,
size = n,
replace = T)
curr.tVal <- t.test(x = curr.sample,
alternative = "less",
mu = mean(curr.sample))
resamples.further$t.stat[i] = curr.tVal$statistic
}
################################################
# Q2
# reampling for further data
R <- 10000
resamples.further <- tibble(t.stat <- numeric(R))
for (i in 1:R){
q()
quit()
# reampling for closer data
closer.dat <- finches.dat$closer
n <- length(closer.dat)
getwd()
################################################
# Q2
# reampling for further data
n <- length(further.dat)
R <- 10000
resamples.further <- tibble(t.stat <- numeric(R))
for (i in 1:R){
curr.sample <- sample(x = further.dat,
size = n,
replace = T)
x.r <- mean(curr.sample)
curr.tVal <- t.test(x = curr.sample,
alternative = "less",
mu = x.r)
resamples.further$t.stat[i] = curr.tVal$statistic
}
View(resamples.further)
View(resamples.further)
source("~/GitHub/lab-13-inference-via-randomization-mikaelboat/lab13.R", echo=TRUE)
################################################
# Q2
# resampling for further data
n <- length(further.dat)
R <- 10000
resamples.further <- tibble(t.stat <- numeric(R))
for (i in 1:R){
curr.sample <- sample(x = further.dat,
size = n,
replace = T)
x.r <- mean(curr.sample)
curr.tVal <- t.test(x = curr.sample,
alternative = "less",
mu = x.r)
resamples.further$t.stat[i] = curr.tVal$statistic
}
View(resamples.further)
View(resamples.further)
resamples.further <- tibble(t.stat <- numeric(R))
for (i in 1:R){
curr.sample <- sample(x = further.dat,
size = n,
replace = T)
curr.tVal <- t.test(x = curr.sample,
alternative = "less",
mu = mean(curr.sample)
)
resamples.further$t.stat[i] = curr.tVal$statistic
}
for (i in 1:R){
curr.sample <- sample(x = further.dat,
size = n,
replace = T)
curr.tVal <- t.test(x = curr.sample,
alternative = "less",
mu = mean(curr.sample)
)
resamples.further$t.stat[i] <- curr.tVal$statistic
}
View(resamples.further)
################################################
# Q2
# re sampling for further data
n <- length(further.dat)
R <- 10000
resamples.further <- tibble(t.stat <- numeric(R))
for(i in 1:R){
curr.sample <- sample(x = further.dat,
size = n,
replace = T)
curr.tVal <- t.test(x = curr.sample,
alternative = "less",
mu = mean(curr.sample)
)
resamples.further$t.stat[i] <- curr.tVal$statistic
}
mean <- mean(resamples.further$t.stat)
source("~/GitHub/lab-13-inference-via-randomization-mikaelboat/lab13.R", echo=TRUE)
View(resamples.further)
View(resamples.further)
View(resamples.closer)
View(resamples.closer)
source("~/GitHub/lab-13-inference-via-randomization-mikaelboat/lab13.R", echo=TRUE)
View(resamples.closer)
View(resamples.closer)
View(resamples.difference)
View(resamples.difference)
View(resamples.further)
View(resamples.further)
curr.tVal
View(resamples.further)
View(resamples.further)
View(resamples.further)
curr.tVal$statistic
source("~/GitHub/lab-13-inference-via-randomization-mikaelboat/lab13.R", echo=TRUE)
curr.tVal
?sd
################################################
# Q2
# re sampling for further data
n <- length(further.dat)
R <- 10000
resamples.further <- tibble(t.stat = numeric(R))
s <- sd(further.dat)
for(i in 1:R){
curr.sample <- sample(x = further.dat,
size = n,
replace = T)
t.stat <- mean(curr.sample) / (s/sqrt(n))
resamples.further$t.stat[i] <- curr.tVal$statistic
}
View(resamples.further)
View(resamples.further)
################################################
# Q2
# re sampling for further data
n <- length(further.dat)
R <- 10000
resamples.further <- tibble(t.stat = numeric(R))
s <- sd(further.dat)
for(i in 1:R){
curr.sample <- sample(x = further.dat,
size = n,
replace = T)
t.stat <- mean(curr.sample) / (s/sqrt(n))
resamples.further$t.stat[i] <- t.stat
}
View(resamples.further)
View(resamples.further)
t
mean(resamples.further$t.stat)
# t-value
t <- t.further$statistic
###################################################
# further bootstrapping
delta <- mean(resamples.further$t.stat) - t.further$statistic
resamples.null.further <- resamples.further |>
mutate(t.shifted = t.stat - delta)
mean(resamples.null.further)
mean(resamples.null.further$t.shifted)
View(resamples.null.further)
View(resamples.null.further)
################################################
# Q2
# re sampling for further data
n <- length(further.dat)
R <- 10000
resamples.further <- tibble(t.stat = numeric(R))
s <- sd(further.dat)
for(i in 1:R){
curr.sample <- sample(x = further.dat,
size = n,
replace = T)
t.stat <- mean(curr.sample) / (s/sqrt(n))
resamples.further$t.stat[i] <- t.stat
}
###################################################
# further bootstrapping
delta <- mean(resamples.further$t.stat) - t.further$statistic
resamples.null.further <- resamples.further |>
mutate(t.shifted = t.stat - delta)
###################################################
# further bootstrapping
delta <- mean(resamples.further$t.stat) + t.further$statistic
resamples.null.further <- resamples.further |>
mutate(t.shifted = t.stat - delta)
###################################################
# further bootstrapping
delta <- mean(resamples.further$t.stat) + t.further$statistic
mean(resamples.null.further$t.shifted)
mean(resamples.null.further$t.stat)
delata
delta
t.further$statistic
t.further$statistic
delta <- mean(resamples.further$t.stat) - t.further$statistic
delta
###################################################
# further bootstrapping
delta <- mean(resamples.further$t.stat) - t.further$statistic
resamples.null.further <- resamples.further |>
mutate(t.shifted = t.stat + delta)
# re sampling for closer data
closer.dat <- finches.dat$closer
###################################################
# further bootstrapping
delta <- mean(resamples.further$t.stat) - t.further$statistic
resamples.null.further <- resamples.further |>
mutate(t.shifted = t.stat - delta)
hist(resamples.null.further$t.shifted)
###################################################
# further bootstrapping
delta <- mean(resamples.further$t.stat) - t.further$statistic
resamples.null.further <- resamples.further |>
mutate(t.shifted = resamples.further$t.stat - delta)
View(resamples.null.further)
View(resamples.null.further)
###################################################
# further bootstrapping
delta <- mean(resamples.further$t.stat) - 0
resamples.null.further <- resamples.further |>
mutate(t.shifted = resamples.further$t.stat - delta)
View(resamples.null.further)
View(resamples.null.further)
mean(resamples.null.further$t.shifted)
hist(resamples.null.further$t.shifted)
qnorm(0.05)
alpha <- qnorm(0.05)
skew <- skewness(further.dat)
n <- (((skew/(6*(0.01*alpha))) * ((2*t^2) + 1) * gauss.pdf))^2
n
################################################
# t-value
t <- qnorm(0.05)
n <- length(further.dat)
gauss.pdf <- dnorm(x = t)
gauss.cdf <- pnorm(q = t)
alpha <- 0.05
skew <- skewness(further.dat)
n <- (((skew/(6*(0.01*alpha))) * ((2*t^2) + 1) * gauss.pdf))^2
n
n <- (((skew/(6*(0.1*alpha))) * ((2*t^2) + 1) * gauss.pdf))^2
n
source("~/GitHub/lab-13-inference-via-randomization-mikaelboat/lab13.R", echo=TRUE)
source("~/GitHub/lab-13-inference-via-randomization-mikaelboat/lab13.R", echo=TRUE)
ggplot(x = t.errors) +
geom_line(aes(x = t.errors$t, y = t.errors$error)) +
geom_hline(yintercept = 0)+
theme_bw
ggplot(x = t.errors) +
geom_line(aes(x = t.errors$t, y = t.errors$error)) +
geom_hline(yintercept = 0)+
theme_bw()
ggplot(x = t.errors) +
geom_line(aes(x = t.errors$t, y = t.errors$error)) +
theme_bw()
ggplot(x = t.errors) +
geom_line(aes(x = t.errors$t, y = t.errors$error)) +
theme_bw() +
labs(x = "Error rate",
y = "t value")
ggplot(x = t.errors) +
geom_line(aes(x = t.errors$t, y = t.errors$error)) +
theme_bw() +
labs(y = "Error rate",
x = "t value")
first.p <- ggplot(x = t.errors) +
geom_line(aes(x = t.errors$t, y = t.errors$error)) +
theme_bw() +
labs(y = "Error rate",
x = "t value")
source("~/GitHub/lab-13-inference-via-randomization-mikaelboat/lab13.R", echo=TRUE)
?qnorm
################################################
# t-value
t <- qnorm(0.05)
t
resamples.null.further
library(boot.pval)
boot.pval()
?boot.pval
library(boot)
?boot
?boot.ci
?boot
###################################################################
# compute bootstrap p-value
###################################################################
boot.t.stat <- function(d, i){
n <- length(d[i])
s <- sd(d[i])
mean(d[i]) / (s/sqrt(n))
}
###################################
# further bootstrapping
further.boots <- boot(data = further.dat,
statistic = boot.t.stat,
R = R)
View(further.boots)
View(further.boots)
View(resamples.closer)
View(resamples.closer)
View(resamples.further)
View(resamples.further)
View(further.boots)
View(further.boots)
?pwr
library(pwr)
further.boot.p <- boot.pval(further.boots)
further.boot.p
# closer bootstrapping
closer.boots <- boot(data = closer.dat,
statistic = boot.t.stat,
R = R)
closer.boot.ci <- boot.ci(closer.boots, type = "bca")
closer.boot.p <- boot.pval(closer.boots)
# difference bootstrapping
difference.boots <- boot(data = difference.dat,
statistic = boot.t.stat,
R = R)
difference.boot.ci <- boot.ci(difference.boots, type = "bca")
difference.boot.p <- boot.pval(difference.boots)
difference.boot.ci
difference.boot.p
closer.boot.p
closer.boot.ci
further.boot.ci <- boot.ci(further.boots, type = "bca")
further.boot.p <- boot.pval(further.boots)
further.boot.p
further.boot.ci
####################################################
# Question 1
finches.dat <- read_csv("zebrafinches.csv")
finches.dat
View(finches.dat)
View(finches.dat)
view(finches.dat)
further.boots$weights
further.boots$statistic$formals
further.boots$statistic
View(closer.boots)
View(closer.boots)
resamples.null.closer
source("~/GitHub/lab-13-inference-via-randomization-mikaelboat/lab13.R", echo=TRUE)
resamples.null.closer
View(closer.boots)
View(closer.boots)
closer.boots[["t"]]
further.boot.p
###################################################
# further bootstrapping
f.delta <- mean(resamples.further$t.stat) - 0
###################################################
# closer bootstrapping
c.delta <- mean(resamples.closer$t.stat) - 0
source("~/GitHub/lab-13-inference-via-randomization-mikaelboat/lab13.R", echo=TRUE)
further.t.ptl <- qt(0.05, df = n - 1)
source("C:/Users/boatm/Downloads/rcode-lecture24.R", echo=TRUE)
source("~/GitHub/lab-13-inference-via-randomization-mikaelboat/lab13.R", echo=TRUE)
difference.boot.p
diff.boot.p <- low + high
diff.boot.p
# difference
low <- mean(resamples.null.diff$t.shifted <= d.delta)
high <- mean(resamples.null.diff$t.shifted >= d.delta)
low
high
d.delta
resamples.null.diff
