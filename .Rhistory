closer.t.p <- (t.test(x = closer.dat, mu = 0, alternative = "greater"))$p.value
# difference
low <- mean(resamples.null.diff$t.shifted <= -d.delta)
high <- mean(resamples.null.diff$t.shifted >= d.delta)
diff.boot.p <- low + high
diff.t.p <- (t.test(x = difference.dat, mu = 0, alternative = "two.sided"))$p.value
boot.p.summary <- tibble(data = c("further", "closer", "difference"),
t.test.p = c(further.t.p, closer.t.p, diff.t.p),
boot.p = c(further.boot.p, closer.boot.p, diff.boot.p))
################################################################################
# 2(c) 5th percentile
################################################################################
further.boot.ptl <- quantile(resamples.null.further$t.shifted, 0.05)
further.t.ptl <- qt(0.05, df = n - 1)
closer.boot.ptl <- quantile(resamples.null.closer$t.shifted, 0.05)
closer.t.ptl <- qt(0.05, df = n - 1)
diff.boot.ptl <- quantile(resamples.null.diff$t.shifted, 0.05)
diff.t.ptl <- qt(0.05, df = n - 1)
percentile.summary <- tibble(data = c("further", "closer", "difference"),
t.test.p = c(further.t.ptl, closer.t.ptl, diff.t.ptl),
boot.p = c(further.boot.ptl, closer.boot.ptl, diff.boot.ptl))
################################################################################
# 2(d) Bootstrap CI
################################################################################
# boot function
R <- 1000
boot.mean <- function(d, i){
mean(d[i])
}
################################################################################
# further bootstrapping
further.boots <- boot(data = further.dat,
statistic = boot.mean,
R = 1000)
further.boot.ci <- boot.ci(further.boots, type = "bca")
further.boot.ci = quantile(resamples.further$mean, c(0.025, 0.975))
further.boot.ci
further.t.ci <- t.test(further.dat, mu = 0, conf.level = 0.95,
alternative = "two.sided")$conf.int
further.t.ci <- t.test(further.dat, mu = 0, conf.level = 0.95,
alternative = "two.sided")$conf.int
further.t.ci
diff.t.ci
diff.boot.ci
ci.summary <- tibble(data = c("further", "closer", "difference"),
t.test.ci = c(further.t.ci, closer.t.ci, diff.t.ci),
boot.ci = c(further.boot.ci, closer.boot.ci, diff.boot.ci))
################################################################################
# 2(d) Bootstrap CI
################################################################################
# further
further.boot.ci <-quantile(resamples.further$mean, c(0.025, 0.975))
further.boot.ci
# closer
closer.boot.ci = quantile(resamples.closer$mean, c(0.025, 0.975))
closer.t.ci <- t.test(closer.dat, mu = 0, conf.level = 0.95,
alternative = "two.sided")$conf.int
diff.boot.ci = quantile(resamples.difference$mean, c(0.025, 0.975))
diff.t.ci <- t.test(further.dat, mu = 0, conf.level = 0.95,
alternative = "two.sided")$conf.int
diff.boot.ci
closer.boot.ci
closer.t.ci
################################################################################
# Question 3
################################################################################
# randomization for further data
shifted.further <- further.dat - mu.0
# perform (randomization) shuffling
further.rand <- tibble(t.stat = numeric(R))
s <- sd(further.dat)
n <- length(further.dat)
for(i in 1:R){
curr.rand <- shifted.further *
sample(x = c(-1, 1),
size = length(shifted.further),
replace = T)
further.rand$t.stat[i] <- mean(curr.rand) / (s/sqrt(n))
}
further.rand <- further.rand |>
mutate(t.stat = t.stat + mu.0)
################################################################################
# randomization for closer data
shifted.closer <- closer.dat - mu.0
# perform (randomization) shuffling
closer.rand <- tibble(t.stat = numeric(R))
s <- sd(closer.dat)
n <- length(closer.dat)
for(i in 1:R){
curr.rand <- shifted.closer *
sample(x = c(-1, 1),
size = length(shifted.closer),
replace = T)
closer.rand$t.stat[i] <- mean(curr.rand) / (s/sqrt(n))
}
# shift back
closer.rand <- closer.rand |>
mutate(t.stat = t.stat + mu.0)
################################################################################
# randomization for difference data
shifted.difference <- difference.dat - mu.0
# perform (randomization) shuffling
diff.rand <- tibble(t.stat = numeric(R))
s <- sd(difference.dat)
n <- length(difference.dat)
for(i in 1:R){
curr.rand <- shifted.difference *
sample(x = c(-1, 1),
size = length(shifted.difference),
replace = T)
diff.rand$t.stat[i] <- mean(curr.rand) / (s/sqrt(n))
}
# shift back
diff.rand <- diff.rand |>
mutate(t.stat = t.stat + mu.0)
################################################################################
# randomization p-value
################################################################################
# further data
delta <- abs(mean(further.dat) - mu.0)
low <- mu.0 - delta # mirror
high<- mu.0 + delta   # xbar
further.rand.p <- mean(further.rand$t.stat <= low) +
mean(further.rand$t.stat >= high)
################################################################################
# closer data
delta <- abs(mean(closer.dat) - mu.0)
low <- mu.0 - delta # mirror
high<- mu.0 + delta  # xbar
closer.rand.p <- mean(closer.rand$t.stat <= low) +
mean(closer.rand$t.stat >= high)
################################################################################
# difference data
delta <- abs(mean(difference.dat) - mu.0)
low <- mu.0 - delta # mirror
high<- mu.0 + delta   # xbar
diff.rand.p <- mean(diff.rand$t.stat <= low) +
mean(diff.rand$t.stat >= high)
random.p.summary <- tibble(data = c("further, closer, difference"),
p-value = c(further.rand.p, closer.rand.p, diff.rand.p))
random.p.summary <- tibble(data = c("further", "closer", "difference"),
p-value = c(further.rand.p, closer.rand.p, diff.rand.p))
library(tidyverse)
random.p.summary <- tibble(data = c("further", "closer", "difference"),
p-value = c(further.rand.p, closer.rand.p, diff.rand.p))
percentile.summary <- tibble(data = c("further", "closer", "difference"),
t.test.p = c(further.t.ptl, closer.t.ptl, diff.t.ptl),
boot.p = c(further.boot.ptl, closer.boot.ptl, diff.boot.ptl))
random.p.summary <- tibble(data = c("further", "closer", "difference"),
p_value = c(further.rand.p, closer.rand.p, diff.rand.p))
random.p.summary
################################################################################
# Question 3
################################################################################
# randomization for further data
shifted.further <- further.dat - mu.0
# perform (randomization) shuffling
further.rand <- tibble(mean = numeric(R))
s <- sd(further.dat)
n <- length(further.dat)
for(i in 1:R){
curr.rand <- shifted.further *
sample(x = c(-1, 1),
size = length(shifted.further),
replace = T)
further.rand$mean[i] <- mean(curr.rand)
}
further.rand <- further.rand |>
mutate(mean = mean + mu.0)
################################################################################
# randomization for closer data
shifted.closer <- closer.dat - mu.0
# perform (randomization) shuffling
closer.rand <- tibble(mean = numeric(R))
s <- sd(closer.dat)
n <- length(closer.dat)
for(i in 1:R){
curr.rand <- shifted.closer *
sample(x = c(-1, 1),
size = length(shifted.closer),
replace = T)
closer.rand$mean[i] <- mean(curr.rand)
}
# shift back
closer.rand <- closer.rand |>
mutate(mean = mean + mu.0)
################################################################################
# randomization for difference data
shifted.difference <- difference.dat - mu.0
# perform (randomization) shuffling
diff.rand <- tibble(mean = numeric(R))
s <- sd(difference.dat)
n <- length(difference.dat)
for(i in 1:R){
curr.rand <- shifted.difference *
sample(x = c(-1, 1),
size = length(shifted.difference),
replace = T)
diff.rand$mean[i] <- mean(curr.rand)
}
# shift back
diff.rand <- diff.rand |>
mutate(mean = mean + mu.0)
################################################################################
# randomization p-value
################################################################################
# further data
delta <- abs(mean(further.dat) - mu.0)
low <- mu.0 - delta # mirror
high<- mu.0 + delta   # xbar
################################################################################
# randomization p-value
################################################################################
# further data
delta <- abs(mean(further.dat) - mu.0)
low <- mu.0 - delta # mirror
high<- mu.0 + delta   # xbar
further.rand.p <- mean(further.rand$mean <= low) +
mean(further.rand$mean >= high)
################################################################################
# closer data
delta <- abs(mean(closer.dat) - mu.0)
low <- mu.0 - delta # mirror
high<- mu.0 + delta  # xbar
closer.rand.p <- mean(closer.rand$mean <= low) +
mean(closer.rand$mean >= high)
################################################################################
# difference data
delta <- abs(mean(difference.dat) - mu.0)
low <- mu.0 - delta # mirror
high<- mu.0 + delta   # xbar
diff.rand.p <- mean(diff.rand$mean <= low) +
mean(diff.rand$mean >= high)
random.p.summary <- tibble(data = c("further", "closer", "difference"),
p_value = c(further.rand.p, closer.rand.p, diff.rand.p))
random.p.summary
xtable(random.p.summary)
libary(xtable)
library(xtable)
xtable(random.p.summary)
repeat{
rand <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift <- further.dat - mu.lower
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift *
sample(x = c(-1, 1),
size = length(x.shift),
replace = T)
rand$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand <- rand |>
mutate(xbars = xbars + mu.lower) # shifting back
# p-value
delta <- abs(mean(further.dat) - mu.lower)
low <- mu.lower - delta # mirror
high<- mu.lower + delta   # xbar
p.val <- mean(rand$xbars <= low) +
mean(rand$xbars >= high)
if(p.val < 0.05){
break
}else{
mu.lower <- mu.lower - mu0.iterate
}
}
starting.point <- mean(further.dat)
mu.lower <- starting.point
mu0.iterate <- 0.001
################################################################################
# c) confidence interval
################################################################################
# for further data
R <- 1000
mu.upper <- starting.point
repeat{
rand <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift <- further.dat - mu.upper
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift *
sample(x = c(-1, 1),
size = length(x.shift),
replace = T)
rand$xbars[i] <- mean(curr.rand)
}
# thinking is hard
rand <- rand |>
mutate(xbars = xbars + mu.upper) # shifting back
# p-value
delta <- abs(mean(further.dat) - mu.upper)
low <- mu.upper - delta # mirror
high<- mu.upper + delta   # xbar
p.val <- mean(rand$xbars <= low) +
mean(rand$xbars >= high)
if(p.val < 0.05){
break
}else{
mu.upper <- mu.upper + mu0.iterate
}
}
further.rand.ci <- c(mu.lower, mu.upper)
################################################################################
# for closer data
R <- 1000
mu0.iterate <- 0.001
starting.point <- mean(closer.dat)
mu.lower <- starting.point
repeat{
rand <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift <- closer.dat - mu.lower
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift *
sample(x = c(-1, 1),
size = length(x.shift),
replace = T)
rand$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand <- rand |>
mutate(xbars = xbars + mu.lower) # shifting back
# p-value
delta <- abs(mean(closer.dat) - mu.lower)
low <- mu.lower - delta # mirror
high<- mu.lower + delta   # xbar
p.val <- mean(rand$xbars <= low) +
mean(rand$xbars >= high)
if(p.val < 0.05){
break
}else{
mu.lower <- mu.lower - mu0.iterate
}
}
mu.upper <- starting.point
repeat{
rand <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift <- closer.dat - mu.upper
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift *
sample(x = c(-1, 1),
size = length(x.shift),
replace = T)
rand$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand <- rand |>
mutate(xbars = xbars + mu.upper) # shifting back
# p-value
delta <- abs(mean(closer.dat) - mu.upper)
low <- mu.upper - delta # mirror
high<- mu.upper + delta   # xbar
p.val <- mean(rand$xbars <= low) +
mean(rand$xbars >= high)
if(p.val < 0.05){
break
}else{
mu.upper <- mu.upper + mu0.iterate
}
}
closer.rand.ci <- c(mu.lower, mu.upper)
################################################################################
# for difference data
R <- 1000
mu0.iterate <- 0.001
starting.point <- mean(difference.dat)
mu.lower <- starting.point
repeat{
rand <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift <- difference.dat - mu.lower
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift *
sample(x = c(-1, 1),
size = length(x.shift),
replace = T)
rand$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand <- rand |>
mutate(xbars = xbars + mu.lower) # shifting back
# p-value
delta <- abs(mean(difference.dat) - mu.lower)
low <- mu.lower - delta # mirror
high<- mu.lower + delta # xbar
p.val <- mean(rand$xbars <= low) +
mean(rand$xbars >= high)
if(p.val < 0.05){
break
}else{
mu.lower <- mu.lower - mu0.iterate
}
}
mu.upper <- starting.point
repeat{
rand <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift <- difference.dat - mu.upper
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift *
sample(x = c(-1, 1),
size = length(x.shift),
replace = T)
rand$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand <- rand |>
mutate(xbars = xbars + mu.upper) # shifting back
# p-value
delta <- abs(mean(difference.dat) - mu.upper)
low <- mu.upper - delta # mirror
high<- mu.upper + delta
p.val <- mean(rand$xbars <= low) +
mean(rand$xbars >= high)
if(p.val < 0.05){
break
}else{
mu.upper <- mu.upper + mu0.iterate
}
}
difference.rand.ci <- c(mu.lower, mu.upper)
difference.boot.ci
difference.rand.ci
closer.rand.ci
further.rand.ci
################################################################################
# question 4
################################################################################
# using the closer data for the hypothesis test
R <- 10000
n <- 25
alpha <- 0.05
mu <- 0
type1_fixed <- numeric(R)
type1_resample <- numeric(R)
for (i in 1:R) {
x <- resamples.further$mean
#x <- rnorm(n, mean = mu)
s_fixed <- sd(x)
# using original sd
t_fixed <- mean(x) / (s_fixed / sqrt(n))
# using resample sd
resample <- sample(x,
size = n,
replace = TRUE)
s_resample <- sd(resample)
t_resample <- mean(resample) / (s_resample / sqrt(n))
type1_fixed[i] <- (t_fixed < qt(0.05, n - 1))
type1_resample[i] <- (t_resample < qt(0.05, n - 1))
}
mean(type1_fixed)
mean(type1_resample)
################################################################################
# question 4
################################################################################
# using the closer data for the hypothesis test
R <- 10000
n <- 25
alpha <- 0.05
mu <- 0
type1_fixed <- numeric(R)
type1_resample <- numeric(R)
for (i in 1:R) {
x <- resamples.further$t.stat
#x <- rnorm(n, mean = mu)
s_fixed <- sd(x)
# using original sd
t_fixed <- mean(x) / (s_fixed / sqrt(n))
# using resample sd
resample <- sample(x,
size = n,
replace = TRUE)
s_resample <- sd(resample)
t_resample <- mean(resample) / (s_resample / sqrt(n))
type1_fixed[i] <- (t_fixed < qt(0.05, n - 1))
type1_resample[i] <- (t_resample < qt(0.05, n - 1))
}
mean(type1_fixed)
################################################################################
# question 4
################################################################################
# using the closer data for the hypothesis test
R <- 10000
n <- 25
alpha <- 0.05
mu <- 0
type1_fixed <- numeric(R)
type1_resample <- numeric(R)
for (i in 1:R) {
#x <- resamples.further$t.stat
x <- rnorm(n, mean = mu)
s_fixed <- sd(x)
# using original sd
t_fixed <- mean(x) / (s_fixed / sqrt(n))
# using resample sd
resample <- sample(x,
size = n,
replace = TRUE)
s_resample <- sd(resample)
t_resample <- mean(resample) / (s_resample / sqrt(n))
type1_fixed[i] <- (t_fixed < qt(0.05, n - 1))
type1_resample[i] <- (t_resample < qt(0.05, n - 1))
}
mean(type1_fixed)
mean(type1_resample)
